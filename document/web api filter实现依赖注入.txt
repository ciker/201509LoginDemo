public static class Bootstrapper
    {
        public static void Initialise()
        {
            var container = UnityConfig.GetConfiguredContainer();

            //实现filter的依赖注入
            var providers = GlobalConfiguration.Configuration.Services.GetFilterProviders().ToList();
            GlobalConfiguration.Configuration.Services.Add(typeof(System.Web.Http.Filters.IFilterProvider),
                new UnityActionFilterProvider(container));

            var defaultprovider = providers.First(p => p is ActionDescriptorFilterProvider);
            GlobalConfiguration.Configuration.Services.Remove(
                typeof(System.Web.Http.Filters.IFilterProvider),
                defaultprovider);

            //var container = BuildUnityContainer();
            GlobalConfiguration.Configuration.DependencyResolver = new Unity.WebApi.UnityDependencyResolver(container);

        }

    }

public static class UnityConfig
    {
        #region Unity Container
        private static Lazy<IUnityContainer> container = new Lazy<IUnityContainer>(() =>
        {
            var container = new UnityContainer();
            RegisterTypes(container);
            return container;
        });

        /// <summary>
        /// Gets the configured Unity container.
        /// </summary>
        public static IUnityContainer GetConfiguredContainer()
        {
            return container.Value;
        }
        #endregion

        /// <summary>Registers the type mappings with the Unity container.</summary>
        /// <param name="container">The unity container to configure.</param>
        /// <remarks>There is no need to register concrete types such as controllers or API controllers (unless you want to 
        /// change the defaults), as Unity allows resolving a concrete type even if it was not previously registered.</remarks>
        public static void RegisterTypes(IUnityContainer container)
        {

            container.RegisterType<PctFramework.StockFinance.WebApi.Controllers.ValuesController.IOrderService, PctFramework.StockFinance.WebApi.Controllers.ValuesController.JoeyOrderService>();
        }
    }

最后直接在Global中注册initialise方法。